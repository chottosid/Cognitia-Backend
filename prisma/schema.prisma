// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(STUDENT)
  avatar      String?
  bio         String?
  institution String?
  location    String?
  website     String?
  otp         String?
  otpExpires  DateTime?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions         Question[]
  answers           Answer[]
  notes             Note[]
  notesGroups       NotesGroup[]
  tasks             Task[]
  sessions          StudySession[]
  questionVotes     QuestionVote[]
  answerVotes       AnswerVote[]
  savedItems        SavedItem[]
  notifications     Notification[]
  contestsOrganized Contest[]      @relation("ContestOrganizer")
  contestRegistrations ContestRegistration[]
  testAttempts      TestAttempt[]
  customTests       ModelTest[]    @relation("TestCreator")

  @@map("users")
}

model Question {
  id         String     @id @default(cuid())
  title      String
  body       String
  tags       String[]
  views      Int        @default(0)
  isResolved Boolean    @default(false)
  difficulty Difficulty @default(MEDIUM)
  subject    String?
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  author  User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers Answer[]
  votes   QuestionVote[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  isAccepted Boolean  @default(false)
  questionId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  question Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  author   User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes    AnswerVote[]

  @@map("answers")
}

model QuestionVote {
  id         String   @id @default(cuid())
  voteType   VoteType
  questionId String
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@map("question_votes")
}

model AnswerVote {
  id       String   @id @default(cuid())
  voteType VoteType
  answerId String
  userId   String
  createdAt DateTime @default(now())

  // Relations
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
  @@map("answer_votes")
}

model NotesGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes Note[]

  @@map("notes_groups")
}

model Note {
  id           String     @id @default(cuid())
  title        String
  visibility   Visibility @default(PRIVATE)
  files        Json       @default("[]")
  viewCount    Int        @default(0)
  likeCount    Int        @default(0)
  dislikeCount Int        @default(0)
  rating       Float?
  ratingCount  Int        @default(0)
  authorId     String
  notesGroupId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notesGroup  NotesGroup  @relation(fields: [notesGroupId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime
  status       TaskStatus @default(NOT_STARTED)
  priority     Priority   @default(MEDIUM)
  subjectArea  String
  tags         String[]   @default([])
  estimatedTime Int?
  notes        String?
  completedAt  DateTime?
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions StudySession[]

  @@map("tasks")
}

model StudySession {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int?      // in minutes
  goal      String?
  notes     String?
  completed Boolean   @default(false)
  userId    String
  taskId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("study_sessions")
}

model Contest {
  id           String        @id @default(cuid())
  title        String
  description  String
  startTime    DateTime
  endTime      DateTime
  status       ContestStatus @default(UPCOMING)
  difficulty   Difficulty    @default(MEDIUM)
  participants Int           @default(0)
  topics       String[]      @default([])
  isVirtual    Boolean       @default(false)
  eligibility  String?
  organizerId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  organizer     User                  @relation("ContestOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  registrations ContestRegistration[]

  @@map("contests")
}

model ContestRegistration {
  id               String   @id @default(cuid())
  contestId        String
  userId           String
  registrationTime DateTime @default(now())
  isVirtual        Boolean  @default(false)

  // Relations
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId])
  @@map("contest_registrations")
}

model ModelTest {
  id           String     @id @default(cuid())
  title        String
  description  String
  timeLimit    Int        // in minutes
  subjects     String[]   @default([])
  topics       String[]   @default([])
  difficulty   Difficulty @default(MEDIUM)
  questions    Json       @default("[]")
  isCustom     Boolean    @default(false)
  passingScore Int
  totalPoints  Int
  createdById  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  createdBy User?         @relation("TestCreator", fields: [createdById], references: [id], onDelete: SetNull)
  attempts  TestAttempt[]

  @@map("model_tests")
}

model TestAttempt {
  id             String        @id @default(cuid())
  status         AttemptStatus @default(IN_PROGRESS)
  startTime      DateTime      @default(now())
  endTime        DateTime?
  timeSpent      Int?          // in seconds
  score          Int?
  correctAnswers Int?
  totalQuestions Int
  answers        Json          @default("{}")
  userId         String
  testId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  test ModelTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_attempts")
}

model SavedItem {
  id       String         @id @default(cuid())
  itemType SavedItemType
  itemId   String
  tags     String[]       @default([])
  userId   String
  savedAt  DateTime       @default(now())

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemType, itemId])
  @@map("saved_items")
}

model Notification {
  id            String           @id @default(cuid())
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false)
  relatedId     String?
  relatedType   String?
  actorId       String?
  actorName     String?
  actorAvatar   String?
  userId        String
  createdAt     DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum VoteType {
  UP
  DOWN
}

enum Visibility {
  PRIVATE
  PUBLIC
  SHARED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ContestStatus {
  UPCOMING
  ONGOING
  FINISHED
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
}

enum SavedItemType {
  QUESTION
  NOTE
}

enum NotificationType {
  ANSWER
  VOTE
  ACCEPTANCE
  COMMENT
  MENTION
  SYSTEM
}
