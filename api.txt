*************** Tasks API Documentation ***************


1. Get All Tasks

    Endpoint: GET /

    Description: Retrieve all tasks for the authenticated user.

    Response:

{
  "tasks": [
    {
      "id": "uuid",
      "title": "Task Title",
      "description": "Task description",
      "fileLink": "/uploads/1234.png",    // or null
      "dueDate": "2025-07-04T00:00:00.000Z",
      "priority": "HIGH",
      "subjectArea": "Math",
      "estimatedTime": 120,               // in minutes
      "status": "NOT_STARTED",
      "userId": "user-uuid",
      "createdAt": "2025-06-01T12:00:00.000Z",
      "updatedAt": "2025-06-02T12:00:00.000Z"
    }
  ]
}

2. Get Task By ID

    Endpoint: GET /:id

    Description: Retrieve a specific task by its ID (must belong to the user).

    Response (Success):

{
  "task": { /* same shape as above */ }
}

    Response (Not Found):

{
  "error": "Task not found"
}

3. Create New Task

    Endpoint: POST /

    Description: Create a new task for the authenticated user.

    Request Body (multipart/form-data if uploading file):

{
  "title": "New Task",
  "description": "Task details",
  "dueDate": "2025-07-05",
  "priority": "MEDIUM",
  "subjectArea": "Science",
  "estimatedTime": 90            // in minutes
  // file: (optional) file field named "file"
}

    Response:

{
  "message": "Task created successfully",
  "task": { /* full task object as above */ }
}

4. Update Task

    Endpoint: PUT /:id

    Description: Update all editable fields of an existing task.

    Request Body: same as Create

    Response (Success):

{
  "message": "Task updated successfully",
  "task": { /* full task object */ }
}

    Response (Not Found):

{
  "error": "Task not found"
}

5. Update Task Status

    Endpoint: PUT /:id/status

    Description: Update only the status field of a task.

    Request Body:

{
  "status": "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED"
}

    Response (Success):

{
  "message": "Task status updated successfully",
  "task": {
    "id": "uuid",
    "status": "COMPLETED",
    "completedAt": "2025-07-03T15:00:00.000Z",  // null if not set
    // other fields omitted
  }
}

    Response (Not Found):

{
  "error": "Task not found"
}

6. Mark Task as Completed

    Endpoint: PUT /:id/complete

    Description: Convenience endpoint to set status to COMPLETED.

    Response:

{
  "message": "Task marked as completed",
  "task": { /* full task object with status=COMPLETED */ }
}

7. Delete Task

    Endpoint: DELETE /:id

    Description: Delete a task by ID (must belong to the user).

    Response (Success):

{
  "message": "Task deleted successfully"
}

    Response (Not Found):

{
  "error": "Task not found"
}

8. Generate Schedule

    Endpoint: POST /generate

    Description: Generate a study schedule based on pending tasks and today's availability.

    Process:

     • Fetch NOT_STARTED/IN_PROGRESS tasks  
     • Fetch user's availability or use defaults  
     • Call external scheduling service  
     • Store and return study sessions  

    Response (Success):

{
  "message": "Schedule generated successfully",
  "schedule": [
    {
      "taskId": "uuid",
      "startTime": "2025-07-03T09:00:00.000Z",
      "endTime":   "2025-07-03T11:00:00.000Z",
      "goal":      "Complete chapter 5"
    },
    // ...
  ]
}

    Response (Errors):

{
  "error": "No tasks found for the user"
}

or

{
  "error": "Could not reach scheduling service"
}

or

{
  "error": "Invalid schedule response"
}

9. Get Today's Schedule

    Endpoint: GET /today

    Description: Get all study sessions scheduled for today.

    Response:

{
  "sessions": [
    {
      "id": "uuid",
      "userId": "user-uuid",
      "taskId": "task-uuid",
      "startTime": "2025-07-03T09:00:00.000Z",
      "endTime":   "2025-07-03T11:00:00.000Z",
      "duration":  120,               // in minutes
      "goal":      "Complete chapter 5",
      "completed": false
    }
  ]
}